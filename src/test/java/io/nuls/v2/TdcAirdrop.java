/**
 * MIT License
 * <p>
 * Copyright (c) 2017-2018 nuls.io
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package io.nuls.v2;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.nuls.base.basic.AddressTool;
import io.nuls.base.data.Address;
import io.nuls.base.data.Transaction;
import io.nuls.core.basic.Result;
import io.nuls.core.constant.BaseConstant;
import io.nuls.core.crypto.HexUtil;
import io.nuls.core.io.IoUtils;
import io.nuls.core.parse.JSONUtils;
import io.nuls.v2.txdata.CallContractData;
import io.nuls.v2.util.NulsSDKTool;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.file.Files;
import java.util.*;
import java.util.concurrent.TimeUnit;

/**
 * @author: PierreLuo
 * @date: 2025/3/10
 */
public class TdcAirdrop {

    String token = "NULSd6HgxbgiGLdyMc8DD9ZsTxrGNFWHeWsdr";
    String wrapper = "NULSd6HguD4g64Yzx2Df93ekb3iSmz3S12FX2";

    String mainUrl = "https://api.nuls.io/";
    String betaUrl = "http://beta.api.nuls.io/";

    private String getMainUrl() {
        return mainUrl;
    }

    private String getTestUrl() {
        return betaUrl;
    }


    @Before
    public void before() {
        NulsSDKBootStrap.initMain(getMainUrl());
        //NulsSDKBootStrap.initTest(getTestUrl());
    }

    // TDCc71ycCojpghtEHQU9y9T1WTK5bh73MYVhV === NULSd6Hgjc6jDMTzt2hqFrJvBPXjgVqLXTkpv
    // TDCc71ycR9ZPEY3EqtW3BELZem9vhuPG5NoKF === NULSd6HggCtkB58LF4BcbCXXp9RtxFHgX2SBK
    // TDCc71ycJDeGNC4NWBEehDSNxZMAXQhAVtJPe === NULSd6HgZGydJj9TuLvE7BdM7wd8mkbawXwDW
    // TDCc71ycAhU54Vwf6JVjE9cPnyXV1Th5gF6FH === NULSd6HghVpyb9XRgvjQWrUJTuk96GRNrAMQv
    // TDCc71ycAhiRfM35UuwXoNUgpH85H8g9fgCuG === NULSd6HghW5LBzcr5YBD65LbVDLjMwQSqbU4o
    // TDCc71ybzkiJ2LtPBNY8XcM3ARkXAoFAmJciE === NULSd6HgXZ5CYzU9mzmopKCwqMyBFbyTwDsqZ
    @Test
    public void addrTest() {
        System.out.println((8879 - 38) % 250);
        System.out.println((8879 - 8020) % 250);
        String addr = "TDCc71ybzkiJ2LtPBNY8XcM3ARkXAoFAmJciE";
        System.out.println(AddressTool.getRealAddress(addr));
        byte[] address = AddressTool.getAddress(addr);
        System.out.println(AddressTool.getChainIdByAddress(address));
        System.out.println(AddressTool.validNormalAddress(address, 66));

        System.out.println(HexUtil.encode(address));
        byte[] hash160 = new byte[20];
        System.arraycopy(address, 3, hash160, 0, 20);
        System.out.println(HexUtil.encode(hash160));
        Address nulsAddr = new Address(1, BaseConstant.DEFAULT_ADDRESS_TYPE, hash160);
        System.out.println(nulsAddr.getBase58());
        System.out.println(changeAddr(addr));
    }

    public String changeAddr(String tdc) {
        byte[] address = AddressTool.getAddress(tdc);
        byte[] hash160 = new byte[20];
        System.arraycopy(address, 3, hash160, 0, 20);
        Address nulsAddr = new Address(1, BaseConstant.DEFAULT_ADDRESS_TYPE, hash160);
        return nulsAddr.getBase58();
    }

    @Test
    public void des() throws Exception {
        String txHex = "";
        Transaction tx = new Transaction();
        tx.parse(HexUtil.decode(txHex), 0);
        System.out.println(HexUtil.encode(tx.getCoinDataInstance().getFrom().get(0).getNonce()));
        byte[] txData = tx.getTxData();
        CallContractData data = new CallContractData();
        data.parse(txData, 0);
        System.out.println(data.getArgs()[0].length);
        System.out.println(data.getArgs()[1].length);
        if (data.getArgs().length > 2)
            System.out.println(data.getArgs()[2].length);
        if (data.getArgs().length > 3)
            System.out.println(data.getArgs()[3].length);
        System.out.println(JSONUtils.obj2json(data.getArgs()[0]));
        System.out.println(JSONUtils.obj2json(data.getArgs()[1]));
        if (data.getArgs().length > 2)
            System.out.println(JSONUtils.obj2json(data.getArgs()[2]));
        if (data.getArgs().length > 3)
            System.out.println(JSONUtils.obj2json(data.getArgs()[3]));
    }

    String preHash = "";
    /**
     TDCc71ybw5NeQ1bnp65552ZUnpAKctDYBDLYW,60000,0
     TDCc71ybw5QEDsTcHNm9mNgLeNtU5rut1owBP,125000000,0
     TDCc71ybw5aA12eiJpJBnuE3gytV48dyyGH9N,956856237600,1269843773878
     TDCc71ybw5c5M45hjjA2nWNLmdZbvC94m9Qqd,125000000,0
     TDCc71ybw5mccaodQr1y2Yj394u5NDyGYSn6X,250000000,0
     */
    @Test
    public void airdropBroadcast() throws Exception {
        List<String> list = IoUtils.readLines(Files.newInputStream(new File("/Users/pierreluo/Downloads/tdc_broadcast.txt").toPath()), "utf8");
        for (int i = 0; i < list.size(); i++) {
            String str = list.get(i);
            String[] split = str.split(",");
            System.out.println("Broadcast: " + split[0]);
            Result<Map> broadcastTxR = NulsSDKTool.broadcast(split[1].trim());
            Assert.assertTrue(JSONUtils.obj2PrettyJson(broadcastTxR), broadcastTxR.isSuccess());
            TimeUnit.SECONDS.sleep(5);
        }
    }

    @Test
    public void airdrop() throws Exception {
        List<String> list = IoUtils.readLines(Files.newInputStream(new File("/Users/pierreluo/Downloads/tdc.ledger.txt").toPath()), "utf8");


        BigInteger availableTotal = BigInteger.ZERO;
        BigInteger lockedTotal = BigInteger.ZERO;
        int m = 0;
        int k = 0;
        List<String> targets = new ArrayList<>();
        List<BigInteger> values = new ArrayList<>();
        List<String> lockedTargets = new ArrayList<>();
        List<BigInteger> lockedValues = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            String str = list.get(i);
            String[] split = str.split(",");
            String addr = changeAddr(split[0].trim());
            BigInteger available = new BigInteger(split[1].trim());
            BigInteger locked = new BigInteger(split[2].trim());
            if (available.compareTo(BigInteger.ZERO) > 0) {
                targets.add(addr);
                values.add(available);
                availableTotal = availableTotal.add(available);
                if (targets.size() == 250) {
                    String[] tx = batchTransfer(targets, values);
                    preHash = tx[0];
                    System.out.println(tx[0] + "," + tx[1] + ",normal");
                    targets.clear();
                    values.clear();
                }
            } else {
                m++;
            }
            if (!targets.isEmpty() && i == list.size() - 1) {
                String[] tx = batchTransfer(targets, values);
                preHash = tx[0];
                System.out.println(tx[0] + "," + tx[1] + ",normal");
            }
            if (locked.compareTo(BigInteger.ZERO) > 0) {
                lockedTargets.add(addr);
                lockedValues.add(locked);
                lockedTotal = lockedTotal.add(locked);
                if (lockedTargets.size() == 250) {
                    String[] tx = batchTransferLocked(lockedTargets, lockedValues);
                    preHash = tx[0];
                    System.out.println(tx[0] + "," + tx[1] + ",locked");
                    lockedTargets.clear();
                    lockedValues.clear();
                }
            } else {
                k++;
            }
            if (!lockedTargets.isEmpty() && i == list.size() - 1) {
                String[] tx = batchTransferLocked(lockedTargets, lockedValues);
                preHash = tx[0];
                System.out.println(tx[0] + "," + tx[1] + ",locked");
            }
        }
        System.out.println(m);
        System.out.println(k);
        System.out.println(availableTotal);
        System.out.println(lockedTotal);
    }

    String[] batchTransfer(List<String> targets, List<BigInteger> values) throws Exception {
        return this._callTxOffline(BigInteger.ZERO, token, "batchTransfer", "", new Object[]{targets.toArray(), values.toArray()}, new String[]{"String[]", "long[]"}, "ad");
    }

    String[] batchTransferLocked(List<String> targets, List<BigInteger> values) throws Exception {
        return this._callTxOffline(BigInteger.ZERO, wrapper, "airdropLocked", "", new Object[]{token, targets.toArray(), values.toArray(), "1757217600"}, new String[]{"Address", "String[]", "String[]", "long"}, "adlock");
    }

    private String[] _callTxOffline(BigInteger value, String contractAddress,
                                String methodName, String methodDesc, Object[] args, String[] argsType, String remark) throws Exception {
        int chainId = SDKContext.main_chain_id;
        String sender = "NULSd6HgZTZzPM488RCiXZKcTMjoKV48nHKeU";
        String priKey = "";
        return callOfflineHexWithoutValidation(chainId, sender, priKey, value, contractAddress,
                methodName, methodDesc, args, argsType, remark);

        // 在线接口 - 广播交易
        //Result<Map> broadcastTxR = NulsSDKTool.broadcast(signedTxHex);
        //Assert.assertTrue(JSONUtils.obj2PrettyJson(broadcastTxR), broadcastTxR.isSuccess());
    }

    private String[] callOfflineHexWithoutValidation(int chainId, String sender, String priKey, BigInteger value, String contractAddress,
                                                   String methodName, String methodDesc, Object[] args, String[] argsType, String remark) throws JsonProcessingException {

        Long gasLimit = Long.valueOf(6000000L);

        int assetChainId = SDKContext.main_chain_id;
        int assetId = SDKContext.main_asset_id;

        BigInteger senderBalance = new BigDecimal("21").movePointRight(8).toBigInteger();
        String nonce;
        if (preHash.isEmpty()) {
            // 在线接口(不可跳过，一定要调用的接口) - 获取账户余额信息
            Result accountBalanceR = NulsSDKTool.getAccountBalance(sender, SDKContext.main_chain_id, SDKContext.main_asset_id);
            Assert.assertTrue(JSONUtils.obj2PrettyJson(accountBalanceR), accountBalanceR.isSuccess());
            Map balance = (Map) accountBalanceR.getData();
            senderBalance = new BigInteger(balance.get("available").toString());
            nonce = balance.get("nonce").toString();
        } else {
            nonce = preHash.substring(64 - 16, 64);
        }

        // 离线接口 - 组装调用合约的离线交易
        Result<Map> txOfflineR = NulsSDKTool.callContractTxOffline(sender, senderBalance, nonce, value, contractAddress, gasLimit, methodName, methodDesc, args, argsType, remark);
        Assert.assertTrue(JSONUtils.obj2PrettyJson(txOfflineR), txOfflineR.isSuccess());
        Map txMap = txOfflineR.getData();
        String txHex = (String) txMap.get("txHex");
        String hash = (String) txMap.get("hash");

        // 离线接口 - 签名交易
        Result<Map> signTxR = NulsSDKTool.sign(txHex, sender, priKey);
        Assert.assertTrue(JSONUtils.obj2PrettyJson(signTxR), signTxR.isSuccess());
        Map resultData = signTxR.getData();
        String _hash = (String) resultData.get("hash");
        Assert.assertEquals("hash不一致", hash, _hash);
        String signedTxHex = (String) resultData.get("txHex");
        //System.out.println(String.format("hash: %s, txHex: %s", _hash, signedTxHex));
        //System.out.println(String.format("Call %s [%s], hash: %s", contractAddress, methodName, _hash));
        return new String[]{hash, signedTxHex};
    }

    @Test
    public void addrValidTest() {
        System.out.println(AddressTool.getAddress("TDCc7lyc6lpnvyzSzw66KlgoDgkzrRhaG88yy"));
    }

    @Test
    public void addrNodeBatchMintData() {
        List<String> list = new ArrayList<>();
        list.add("TDCc71yc5dBWErD8wZqNqWoTeorLe8zcZjY2t");
        list.add("TDCc71yc2LxPkh8qdXNr3tud9UtSb4sqzgbFL");
        list.add("TDCc71yc84BE3cYzmD54AcbAAGkRKfEgddzbK");
        list.add("TDCc71yc7revzBwEyGwsdDmGMBCHQ78xSzbzz");
        list.add("TDCc71yc6UytsUPKGdEFEL5ddCt9BJXY12mMy");
        list.add("TDCc71yc6Psgnyh7nRvyZkCRNV4EKNT41PfL8");
        list.add("TDCc71yby3uJMrN8oc2vBJCiaFPjzFcBktuuB");
        list.add("TDCc71yc1iizCzHpYhEGAL4sNSmVNJwAbrhLa");
        list.add("TDCc71ybycMjNtgvP5gy8eXyVTmiZoKXZSKXN");
        list.add("TDCc71ybwNqMxLNG6sSrdVd5Fzj8euDe5czsi");
        list.add("TDCc71ybwnvodZe79bzwR3WpGfrsUfCou6FaC");
        list.add("TDCc71yc8U9JUCuv8JnXhE2YafKJMRzzXVvSN");
        list.add("TDCc71yc72Dgx55R225yfyUx3spQXnwargNeM");
        list.add("TDCc71ybwnj6EhEtB6nDpPTkeRr1s47rSBFki");
        list.add("TDCc71ybya3V6RzmnhnmLYfuhXxEscahyxsZx");
        list.add("TDCc71yc46LFohbBawtexBYa5DcoGAFv4wvYr");
        list.add("TDCc71ybyUXHQNSBKj5U3fw4QHv3A8hpcBBgR");
        list.add("TDCc71yc3q9WSYN4kB9u8oUt7FfJF2V2f5pmd");
        list.add("TDCc71ycBFHUSZi9aFZfRAcemwqtMynKKUY7U");
        list.add("TDCc71ybyWbFsJfVegZYEdPuh9P2XSARtaBhn");
        list.add("TDCc71ybxk5sbXwJ1gitqFvvzT1stFH22a5js");
        list.add("TDCc71ycBKKLwNJomNCrCsjEYMDtDqy48Wy2g");
        list.add("TDCc71ycCTYAdsxfUyMHTjmch2ocDyMK2oPbu");
        list.add("TDCc71yc1XeAGHGCfg2AhcdGBryxHTEGmcBAY");
        list.add("TDCc71yc6sZt4pT3dSVNyLveAvsGNWqbg4FTi");
        list.add("TDCc71ybyT2oAqvKXuc5kPWUAEML8vkx4koyr");
        list.add("TDCc71ybxD2Z81rK93maGbb1tsg7RMefiio4D");
        list.add("TDCc71ybx8Np9KJCP7b1CPys8PCeDHKfxnnoc");
        list.add("TDCc71ycA8suGMfARirnhcpJtVhg6pEbeb3ss");
        list.add("TDCc71yc7Zwv76iM7BWx8YADSPek323u5MgPz");
        list.add("TDCc71ybySFNoBovJGojrZC2yc4rwLVLCR55d");
        list.add("TDCc71yc4hM914vS1jpmVUct5xHxRoJePLTXH");
        list.add("TDCc71yc4U2Y6HsqfMceR2vhtvecKwjJsKh4y");
        list.add("TDCc71yc2ZAfvrr6kLYocvDfZLHmEZU53AsMb");
        list.add("TDCc71yc3fZ5j2hiWkpAHY8JRrAcSQTfW5WV9");
        list.add("TDCc71ycCYLL3K8DT4gmdrBfBhdYqEGXPLUZy");
        list.add("TDCc71ycCnGewMv2TsW8gCCakEHMpYCiAp7cY");
        list.add("TDCc71ybzJAAPZu4qLTrkAZfC2d23eRc8kZob");
        list.add("TDCc71ycAEpU4szZLjpDLgZ6RgeBLnzDQDgQh");
        list.add("TDCc71yc9bk8Z6EsfT65nFc76WNQJH37g5f4G");
        list.add("TDCc71yc8DNZx6DnvoHQP9pJEn64gFsAMX7eV");
        list.add("TDCc71ycCNppvojzspaCkHkZK3yt3RrgRBAVQ");
        list.add("TDCc71yc2k3nZtKj4i7EdoQQ9AHWFgNPwbBjj");
        list.add("TDCc71yc95vEfyCCLCfteChZBAjmLFF5TbzAF");
        list.add("TDCc71ybwmyVPtahsKHmVWJaVrpfeg5hiUdwU");
        list.add("TDCc71ycAtDaUCYB8MNxqpcB9E3YUrFRK2dwA");
        list.add("TDCc71yc12z4W2Z1Uk72vdvF1vbTTa7CywYFT");
        list.add("TDCc71ybyp8nMBfKHU8EFjB9mxuyfFXB1GEo1");
        list.add("TDCc71ybwQJTR7Cqj2pvBtpTJc9oC1bwqxWRj");
        list.add("TDCc71ybyZwMiQaexp7h7TtT2utur8yiZvRMu");
        list.add("TDCc71ycAFst51N9eVGP2pM8c3b5e53RJWNni");
        list.add("TDCc71ybzvmZ2tNH5e9tK28o5bWRZBuLNSMmS");
        list.add("TDCc71yc452edZoD6iVbB4aAwdG7eV8hU6DHQ");
        list.add("TDCc71ycAKp3EjSWyL5PdLSsdL2Q6AfmttYCP");
        list.add("TDCc71yc35tcXpJ1zcZvoBAXF3F1LgSeAyAYc");
        list.add("TDCc71yc7thnHFPwmebuQTz22uhdekwfWABJB");
        list.add("TDCc71ycCf3N5gsd5CjJJmZjtLUxJhR3ssC8d");
        list.add("TDCc71yc8gjoFTcUGCwgr6MnmVG2BLYrKTsSR");
        list.add("TDCc71yc4BYChWc9rQsTCzR1yvCua3ZJVMCjK");
        list.add("TDCc71yc8cJqWkWpWgjoTrxdgHERkwAp1YfPv");
        list.add("TDCc71ybwq3R24qooyW49BCg96y67j38qEtSm");
        list.add("TDCc71yc95g3EuMnKTx4FXxLuptXVURNC6nz3");
        list.add("TDCc71ybwYthY1Gv5W81WJfNyBWfxbnLpoVLJ");
        list.add("TDCc71yc9U71BpJhjSysm8Sgx7gwVUYS3TNDB");
        list.add("TDCc71ycAj5dZAcqvtTbmJ6ZmwcpkFqSUnvBb");
        list.add("TDCc71ybwa4THoD9ZQhbB8yjBgcy8GY8KP3oa");
        list.add("TDCc71yc8XPtuTxepwXepwqogRg3FEhf4kDnc");
        list.add("TDCc71yc6WjyMgBY5ruiDeudStHkmTicnHU49");
        list.add("TDCc71yby7Q7VW8JDF9eYWrKz83qeCJRjryTY");
        list.add("TDCc71yc9y3fMCqgLALzdswuVyMJCyQAhLbaW");
        list.add("TDCc71yc1GLzDU7TN6t57qtedg9ACjmmnqMTu");
        list.add("TDCc71ycBkdC8K8EWQ8U4FXB4q2kCU1L8SxAC");
        list.add("TDCc71yc5bwyqjwZy1TBRM3QRo4sdRXTWJhem");
        list.add("TDCc71yc2xrRBeUsMFUZZbzNGXqDH5GXXZ3gG");
        list.add("TDCc71ycBMMQW16joNJFV6sVGreaWrdrzLVhj");
        list.add("TDCc71yc7bxaS9m4keWzFn9ue74MCEbhdPhdd");
        list.add("TDCc71yc2FxyjYKAQ1yokQarSGwsQYcT3nobW");
        list.add("TDCc71yc2S5bEaatfTsuRxiXJKaq6re5dn2nK");
        list.add("TDCc71yc1fkS6EM5TDNeH7pfkQaFKjZQvjkeR");
        list.add("TDCc71yc7vP4kTjV1Pxout9V91bw5DTM1L5UG");
        list.add("TDCc71ycAX59ECq9Ds4T11b9M3xFenrHvdfvJ");
        list.add("TDCc7lyc6lpnvyzSzw66KlgoDgkzrRhaG88yy");
        System.out.println(list.size());
        Set<String> domains = new HashSet<>();
        StringBuilder sb = new StringBuilder("[");
        StringBuilder sb1 = new StringBuilder("[");
        StringBuilder sb2 = new StringBuilder("[");
        int count=0;
        for (int i = 0; i < list.size(); i++) {
            String addr = list.get(i);
            String s;
            try {
                s = changeAddr(addr);
            } catch (Exception e) {
                System.err.println(addr);
                continue;
            }
            sb.append("\"").append(s).append("\"").append(",");
            String domain = s.substring(s.length() - 3);
            if (!domains.add(domain)) {
                System.err.println("domain 重复");
                break;
            }
            sb1.append("\"").append(domain).append(".tdc\"").append(",");
            sb2.append("\"").append("\"").append(",");
            count++;
        }
        sb.deleteCharAt(sb.length() - 1);
        sb1.deleteCharAt(sb1.length() - 1);
        sb2.deleteCharAt(sb2.length() - 1);
        System.out.println(count);
        System.out.println(sb);
        System.out.println(sb1);
        System.out.println(sb2);
    }
}
